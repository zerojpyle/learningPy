### To Do
#
# 1. Escape sequence flash cards
# 2. Study "argv"
# 3. Create function checklist (page 62)
# 4. Learn += (a = 5; a += 5, print(a) will give "10")
# 5. Study ex22.txt
# 6. """ function help line (after def line)
# 7. from ex25 import * will bring the functions in directly (don't need to say ex25.function)
#
### Notes
#
## GitHub
# youtube.com/watch?v-0fKg7e37bQE
# "<escape>:wq" will get you out of commit multi-line message screen
#
# 1. Commands
#    a. git (shows all available commands)
#    b. git clone "website" (Create local folder)
#    c. git status (Check sync status of all files)
#    d. git add <file> (add file to be staged for committing)
#       i. use . or -A to add all files
#    e. git commit -m "message" (Stage a file to push)
#    f. git push ("push" all committed files to GitHub)
#    g. git pull ("pull" all files from GitHub)
#  2. Workflow
#    a. Pull all files at the beginning of day/work
#    b. Add commits for every incremental piece of work throughout day
#    c. Push/Pull every few hours
#  3. Merge conflicts
#    a. when you make a change that conflicts, and try to pull, it will show
#       conflicts in the file
#    b. you need to make a manual edit, add, then type "git commit" with no -m
#    c. git push
#  4. Updating GitHub credentials on Mac
#    a. https://docs.github.com/en/get-started/getting-started-with-git/updating-credentials-from-the-macos-keychain
#  5. "exit(0)" will exit with no error, "exit(1)" will exit w/error
#
# 2. Rules for loops and debugging
#    a. Rules for loops
#       i.   use a while-loop only to loop forever, and that means probably never
#            This only applies to Python, other languages are different.
#       ii.  Use a for-loop for all other kinds of looping, especially if there
#            is a fixed or limited number of things to loop over.
#    b. Tips for Debugging
#       i.   Do not use a "debugger." A debugger is like doing a full-body scan on
#            a sick person. You do not get any specific useful information, and
#            you find a whole lot of information that doesn't help and is just
#            confusing.
#       ii.  The best way to debug a program is to use print to print out the
#            values of variables at points in the program to see where they go
#            wrong.
#       iii. Make sure parts of your programs work as you work on them. Do not
#            write massive files of code before you try to run them. Code a
#            little, run a little, fix a little.
# 3. Tips for creating software
#    a. On paper/index cards, write a list of tasks you need to complete to
#       finish the software. This is your to-do list.
#    b. Pick the easiest thing you can do from your list.
#    c. write out English comments in your source file as a guide for how you
#       would accomplish this task in your code.
#    d. Write some of the code under the English comments.
#    e. Quickly run your script to see if that code worked.
#    f. Keep working in a cycle:
#        i. Write some code
#        ii. Run the code to test it
#        iii. Fix any errors until it works
#    g. Cross this task off your list, then pick your next easiest task & repeat
# 4. Installing modules
#    a. pip3 install --user numpy 
